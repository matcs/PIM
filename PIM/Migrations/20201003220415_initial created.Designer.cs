// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PIM.Data;

namespace PIM.Migrations
{
    [DbContext(typeof(PIMContext))]
    [Migration("20201003220415_initial created")]
    partial class initialcreated
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PIM.Models.Address", b =>
                {
                    b.Property<long>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddrCity")
                        .HasColumnType("VARCHAR(40)");

                    b.Property<string>("AddrNeighbohood")
                        .HasColumnType("VARCHAR(40)");

                    b.Property<string>("AddrNumber")
                        .HasColumnType("VARCHAR(10)");

                    b.Property<string>("AddrType")
                        .HasColumnType("VARCHAR(25)");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<string>("ZipCode")
                        .HasColumnType("VARCHAR(25)");

                    b.HasKey("AddressId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            AddressId = 1L,
                            AddrCity = "São Paulo",
                            AddrNeighbohood = "Republica",
                            AddrNumber = "105B",
                            AddrType = "Rua",
                            PersonId = 1L,
                            ZipCode = "01045001"
                        },
                        new
                        {
                            AddressId = 2L,
                            AddrCity = "São Paulo",
                            AddrNeighbohood = "Pinheiros",
                            AddrNumber = "125",
                            AddrType = "Avenida",
                            PersonId = 2L,
                            ZipCode = "39100000"
                        },
                        new
                        {
                            AddressId = 3L,
                            AddrCity = "Osasco",
                            AddrNeighbohood = "Vila Yara",
                            AddrNumber = "463",
                            AddrType = "Rua",
                            PersonId = 3L,
                            ZipCode = "06026050"
                        });
                });

            modelBuilder.Entity("PIM.Models.Administrator.Administrator", b =>
                {
                    b.Property<long>("AdministratorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.HasKey("AdministratorId");

                    b.ToTable("Administrators");
                });

            modelBuilder.Entity("PIM.Models.Administrator.CarteiraDeTrabalho", b =>
                {
                    b.Property<long>("CarteiraDeTrabalhoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AdministratorId")
                        .HasColumnType("bigint");

                    b.HasKey("CarteiraDeTrabalhoId");

                    b.ToTable("CarteiraDeTrabalhos");
                });

            modelBuilder.Entity("PIM.Models.Country", b =>
                {
                    b.Property<long>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<string>("CountryName")
                        .HasColumnType("VARCHAR(35)");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            CountryId = 1L,
                            AddressId = 1L,
                            CountryName = "Brasil"
                        },
                        new
                        {
                            CountryId = 2L,
                            AddressId = 2L,
                            CountryName = "Brasil"
                        },
                        new
                        {
                            CountryId = 3L,
                            AddressId = 3L,
                            CountryName = "Brasil"
                        });
                });

            modelBuilder.Entity("PIM.Models.PersonModel.Identity", b =>
                {
                    b.Property<long>("IdentityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DataExpedicao")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrgaoExpedidor")
                        .HasColumnType("VARCHAR(7)");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<string>("RegistroGeral")
                        .HasColumnType("CHAR(10)");

                    b.HasKey("IdentityId");

                    b.ToTable("Identities");

                    b.HasData(
                        new
                        {
                            IdentityId = 1L,
                            DataExpedicao = new DateTime(2000, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrgaoExpedidor = "SSP",
                            PersonId = 1L,
                            RegistroGeral = "190471001"
                        },
                        new
                        {
                            IdentityId = 2L,
                            DataExpedicao = new DateTime(1995, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrgaoExpedidor = "SSP",
                            PersonId = 2L,
                            RegistroGeral = "362932888"
                        },
                        new
                        {
                            IdentityId = 3L,
                            DataExpedicao = new DateTime(2006, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrgaoExpedidor = "SSP",
                            PersonId = 3L,
                            RegistroGeral = "362932888"
                        });
                });

            modelBuilder.Entity("PIM.Models.PersonModel.Person", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("CPF")
                        .HasColumnType("VARCHAR(15)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("VARCHAR(30)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("First_Name")
                        .HasColumnType("VARCHAR(70)");

                    b.Property<string>("Last_Name")
                        .HasColumnType("VARCHAR(70)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Password")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .HasColumnType("VARCHAR(15)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SocialName")
                        .HasColumnType("VARCHAR(25)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "20151c97-45fc-4750-a869-3e5129818551",
                            AccessFailedCount = 0,
                            BirthDay = new DateTime(1999, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CPF = "65519709076",
                            ConcurrencyStamp = "f98598c5-4fc8-4000-be43-4f05754a8eb1",
                            Email = "ezratmp+lath6@gmail.com",
                            EmailConfirmed = false,
                            First_Name = "Mike",
                            LockoutEnabled = false,
                            Password = "pass",
                            PersonId = 1L,
                            PhoneNumberConfirmed = false,
                            Role = "USER",
                            SecurityStamp = "ce8c0871-0d21-48f5-a381-6757ab905241",
                            SocialName = "null",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "97c4a192-9425-49a0-8fc7-9cac141ccfc4",
                            AccessFailedCount = 0,
                            BirthDay = new DateTime(1985, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CPF = "82124778005",
                            ConcurrencyStamp = "1ce573b4-440b-4e01-a168-82386e2a55f2",
                            Email = "lengtmp+lue5n@gmail.com",
                            EmailConfirmed = false,
                            First_Name = "Mackenzie",
                            LockoutEnabled = false,
                            Password = "passWORLD",
                            PersonId = 2L,
                            PhoneNumberConfirmed = false,
                            Role = "USER",
                            SecurityStamp = "f9b23451-3b38-4ec3-a906-36d3b565d468",
                            SocialName = "null",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "12ae27c4-2849-483e-9f36-914230bf850f",
                            AccessFailedCount = 0,
                            BirthDay = new DateTime(2000, 12, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CPF = "58113438092",
                            ConcurrencyStamp = "ab10e3ef-e9cb-498d-9db2-690d5c76306c",
                            Email = "banetmp+nqzlb@gmail.com",
                            EmailConfirmed = false,
                            First_Name = "Alexia",
                            LockoutEnabled = false,
                            Password = "p4ssw0rld",
                            PersonId = 3L,
                            PhoneNumberConfirmed = false,
                            Role = "USER",
                            SecurityStamp = "8161f49c-6f66-447e-8ada-ec6d899312c3",
                            SocialName = "null",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("PIM.Models.PersonModel.Telephone", b =>
                {
                    b.Property<long>("TelephoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DDD")
                        .HasColumnType("VARCHAR(5)");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<string>("TelephoneNumber")
                        .HasColumnType("VARCHAR(11)");

                    b.HasKey("TelephoneId");

                    b.ToTable("Telephones");

                    b.HasData(
                        new
                        {
                            TelephoneId = 1L,
                            DDD = "011",
                            PersonId = 1L,
                            TelephoneNumber = "99507-9350"
                        },
                        new
                        {
                            TelephoneId = 2L,
                            DDD = "011",
                            PersonId = 2L,
                            TelephoneNumber = "98732-0893"
                        },
                        new
                        {
                            TelephoneId = 3L,
                            DDD = "011",
                            PersonId = 3L,
                            TelephoneNumber = "99970-7434"
                        });
                });

            modelBuilder.Entity("PIM.Models.State", b =>
                {
                    b.Property<long>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<string>("StateName")
                        .HasColumnType("VARCHAR(30)");

                    b.HasKey("StateId");

                    b.ToTable("States");

                    b.HasData(
                        new
                        {
                            StateId = 1L,
                            AddressId = 1L,
                            StateName = "São Paulo"
                        },
                        new
                        {
                            StateId = 2L,
                            AddressId = 2L,
                            StateName = "São Paulo"
                        },
                        new
                        {
                            StateId = 3L,
                            AddressId = 3L,
                            StateName = "São Paulo"
                        });
                });

            modelBuilder.Entity("PIM.Models.User.Contract", b =>
                {
                    b.Property<long>("ContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("ContractTerms")
                        .HasColumnType("VARBINARY(MAX)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("ContractId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("PIM.Models.User.Wallet", b =>
                {
                    b.Property<long>("WalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<double>("WalletBalance")
                        .HasColumnType("float");

                    b.HasKey("WalletId");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PIM.Models.PersonModel.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PIM.Models.PersonModel.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PIM.Models.PersonModel.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PIM.Models.PersonModel.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
